0. Create GitHub Repo
    - add .gitignore: node
    - add readme file

1. Create Local Project folder
- clone GitHub Repo
    terminal --> git clone <repo_url>
- create client folder
- create server folder


2. Install Client App
- navigate to client folder
    terminal --> cd client
- install vite app with react template
    terminal --> npm create vite . -- --template react
    terminal --> npm install
- Install Route libraly
    terminal --> npm install react-router-dom
- Install test library
    terminal --> npm install -D vitest
- clean the project
    - delete src/asset folder
    - delete src/App.css
    - delete public/vite.svg
- refacture App.jsx
-----------------------------------------------------------------
function App() {
  return (
    <>
    <h1>Dashboard App</h1>
    </>
  )
}

export default App
-----------------------------------------------------------------
-create src/components folder

- Run client
    terminal --> npm run dev

Check React Query for query layering  - https://tanstack.com/query/latest/docs/framework/react/overview

Configure main.jsx as:
-----------------------------------------------------------------
import { BrowserRouter } from 'react-router-dom'

import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import React from 'react'

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <BrowserRouter>
            <App />
        </BrowserRouter>
    </React.StrictMode>,
)
-----------------------------------------------------------------


3. Install tailwind css:
- navigate to client folder
    terminal --> cd client
- install tailwind libraly
    terminal --> npm install -D tailwindcss postcss autoprefixer
- initialize tailwind
    terminal --> npx tailwindcss init -p
- install tailwind dependencies:
	terminal --> npm i @headlessui/react
	terminal --> npm i @heroicons/react
	terminal --> npm i tw-elements
    terminal --> npm i @material-tailwind/react

- in tailwind.config.js add:
-----------------------------------------------------------------
import withMT from "@material-tailwind/react/utils/withMT";
import plugin from "tw-elements/plugin.cjs";

export default withMT({
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
    "./node_modules/tw-elements/dist/js/**/*.js",
  ],
  theme: {
    extend: {},
  },
  darkMode: "class",
  plugins: [plugin],
});

in index.css
-----------------------------------------------------------------
@import url("https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,900&display=swap");

@tailwind base;

html {
  @apply text-gray-800 bg-white; /* Replace with closest Tailwind color */
}

html.dark {
  @apply text-gray-100 bg-gray-900; /* Replace with closest Tailwind color */
}

@tailwind components;
@tailwind utilities;

p {
  @apply leading-[1.6];
}
-----------------------------------------------------------------

- Run Client
    terminal --> cd client
	terminal --> npm run dev

4. Set SoftUni practice server
- navigate to server folder
    terminal --> cd server
- download 'server-1.0.0.zip' practice server from https://github.com/softuni-practice-server/softuni-practice-server/releases/tag/v1.0.0
- unzip the server in server folder
    leave only server.js and data folder

- Run server
    terminal --> cd server
    terminal --> node server.js


5. Development flow:
- tailwind dashboard components - https://tw-elements.com/docs/react/data/charts/
- tailwind material components - https://www.material-tailwind.com/docs/react/guide/cra
- free components - https://tailblocks.cc/

- create conponent snippet
In search field type '>snippets:Configure User Snippet' and find javascriptreact.json
-----------------------------------------------------------------
{
	// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Function Component": {
		"prefix": "comp",
		"body": [
			"export default function ${1:Component}() {",
			"	return (",
			"		$2",
			"	);",
			"}"
		],
		"description": "Create function component"
	}
}
-----------------------------------------------------------------

- navigate fast between files
    search file - Ctrl + p

- format current file
    - Alt + Shift + f   with formatters
    - Ctrl + Shift + p  with identation


6. Set-up test nvironment:

install JS DOM - allow us to work with .document:
	terminal/client --> npm install -D jsdom

Install the test libraries:
	terminal/client --> npm install -D @testing-library/react
	terminal/client --> npm install -D @testing-library/jest-dom
	terminal/client --> npm install -D @testing-library/user-event


Set script config:

In package.json add "test": "vitest":
-----------------------------------------------------------------
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "test": "vitest"
  },
-----------------------------------------------------------------


Set up memory cleanup functionality:

create src/tests/setup.js and add:
-----------------------------------------------------------------
import { cleanup } from "@testing-library/react"
import { afterEach } from "vitest";
import "@testing-library/jest-dom/vitest";

afterEach(() => {                   // after every test call this function
    cleanup();                      // cleans up any leftover resources
});
-----------------------------------------------------------------


Config vite for test env:

in vite.config.js add:
-----------------------------------------------------------------
// import { defineConfig } from 'vite';
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./src/tests/setup.js'],
  },
});
-----------------------------------------------------------------


NPM trends: Best tests usage - https://npmtrends.com/jest-vs-mocha-vs-vitest

FUNCTINAL BASED APPROACH - COMMON FOLDER WITH SAME HIERARCHY 'TESTS' WITH ALL TESTS FOR ALL COMPONENTS 
FEATURE BASED APPROACH - IN EVERY COMPONENT FOLDER THERE IS A TEST FILE - PREFERABLE !!!

App.spec.jsx - BDD	Behaior Driven Development	USED IN THE DEMO
App.test.jsx - TDD	Test Driven Development


EXAMPLE SIMPLE TEST: Create App.spec.jsx and add:
-----------------------------------------------------------------
import { expect, it } from "vitest";
import App from './App';

// test('True test', () => {            // test can be changed to 'it'
it('should be equal', () => {
    // expect(true).toBe(true);         // same as euqal
    // expect(true).toEqual(true);
    // expect(true).toBe.true;          // jest
    // expect(true).to.be.true;         // mocha + chai
    expect(true).toBeTruthy();          // vitest
});
-----------------------------------------------------------------

Dummy test:

create src/App.test.js:
-----------------------------------------------------------------
import { expect, it, test } from "vitest";

// test('True test', () => {               // test can be changed to 'it'
it('should be equal', () => {
    // expect(true).toBe(true);        // same as euqal
    expect(true).toEqual(true);

});
-----------------------------------------------------------------

Run the test:
	terminal --> npm run test

TESTS Cheat Sheet: https://testing-library.com/docs/react-testing-library/cheatsheet

		No Match   1 Match	1+ Match	Await?
getBy		throw	   return	throw		No
findBy		throw	   return	throw		Yes
queryBy		null	   return	throw		No
getAllBy	throw	   array	array		No
findAllBy	throw	   array	array		Yes
queryAllBy 	[]	       array	array		No



- navigate fast between files
    search file - Ctrl + p

- format current file
    - Alt + Shift + f   with formatters
    - Ctrl + Shift + p  with identation
